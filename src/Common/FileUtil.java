package Common;

import com.alibaba.fastjson.JSON;
import org.apache.commons.lang3.StringUtils;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.*;

public class FileUtil {

	public static void main(String[] args) throws Exception {
		String filePath = "/Users/wangyang/Downloads/data/cnbc-20201225-juhao.txt";
		ArrayList<String> lines = new ArrayList<>();
		readLines(filePath, lines);
		HashSet<String> result = new HashSet<>();
		Map map = new HashMap();
		for (String line : lines) {
			if (StringUtils.isBlank(line)){
				continue;
			}
			String[] arr = line.trim().split(" ");
			if (arr == null || arr.length < 3) {
				continue;
			}
			result.add(line);
//			for (int index = 0; index< arr.length; index++) {
//				result.add(arr[index].trim());
//			}
		}
		String writeFilePath = "/Users/wangyang/Downloads/data/cnbc-20201225-juhao-deal.txt";
		writeLines(writeFilePath, result);

















//		String str = "5,6,8,36,48,52,71,72,77,78,79,96,97,98,119,40003,50017,50018,10000029,10000030,10000031,10000032,10000040,10000240,10000241,10000797,10000798,10000811,10000812,10000813,10001389,10002139,10014009,10014147,10014158,10014606,10014610,10014788,10015200,10015201,10015202,10015203,10015311,10015321,10015322,10015451,10015452,10015453,10015454,850000593,850000595,850000681,850000683,850000719,850000721,850000729,850000731,850000757,850000767,850000769,850000770,850000772,850000945,850001275,850001305,850002043,850002341,850002349,850002351,850002353,850002354,850002355,7608311657,7608311667,7608311668,7608311739,7608312087,7608312090,7608312355,7608312677,7608312731,7608313187,7608313224,7608313632,7608313633,7608313728,7608313730,7608313731,76083134722,76083134723,76083135350,76083135351,76083135352,76083136662,76083137141,76083139008,76083139564,76083139565,76083140063,76083141731,76083142897,76083143217,7401811261606,7401811261678,7401811261679,7401811261681,7401811261682,7401811261999,7401811262329,7401811262333,7401811262575,7401811262961,7401811262962,7401811263115,7401811263477,7401811263478,7401811263592,7401811263593,7401811263594,7401811263676,7401811263755,7401811264156,7401811264157,7401811264668,7401811264669,7401811265798,7401811265838,7401811265885,7401811265886,7401811265888,7401811265889,7401811265939,7401811265963,7401811265968,7401811266118,7401811266492,7401811266493,7401811266498,7401811266499,7401811266500,7401811266551,7401811266553,7401811266558,7401811266559,7401811266560,7401811266561,7401811266938,7401811266939,7401811267118,7401811267119,7401811267248,7401811267291,7401811267335,7401811267629,7401811267630,7401811267658,7401811267663,7401811267710,7401811267713,7401811267714,7401811268091,7401811268341,7401811268362,7401811268576,7401811268641,7401811268650,7401811268653,7401811268764,7401811268765,7401811268766,7401811269145,7401811269149,7401811269164,7401811269207,7401811269208,7401811269242,7401811269243,7401811269244,7401811269245,7401811269513,7401811269569,7401811269753,7401811269867,7401811269879,7401811269990,7401811270042,7401811270043,7401811270295,7401811270573,7401811270672,7401811270675,7401811270780,7401811270945,7401811270946,7401811270949,7401811270951,7401811270957,7401811270964,7401811270966,7401811270970,7401811270973,7401811270974,7401811270976,7401811270978,7401811270994,7401811271011,7401811271013,7401811271027,7401811271029,7401811271031,7401811271032,7401811271033,7401811271035,7401811271037,7401811271038,7401811271041,7401811271046,7401811271054,7401811271055,7401811271056,7401811271073,7401811271074,7401811271075,7401811271076,7401811271103,7401811271127,7401811272026,7401811272047,7401811272417,7401811272418,7401811272419,7401811272422,7401811272423,7401811272424,7401811272431,7401811272846,7401811272990,7401811273382,7401811273629,7401811273726,7401811273727,7401811273786,7401811273976,7401811273990,7401811274051,7401811274105,7401811274126,7401811274218,7401811274219,7401811274377,7401811274395,7401811274397,7401811274761,7401811275043,7401811275354,7401811275781,7401811275783,7401811275843,20190123165060,20190123165266,20190123165514,20190123165718,20190123165720,20190123166117,20190123166141,20190123166142,20190123166155,20190123166156,20190123166295,20190123166493,20190123166735,20190123166991,20190123166992,20190123167059,20190123167154,20190123168018,20190123168241,20190123168243,20190123168244,20190123168245,20190123168246,20190123168364,20190123168429,20190123168530,20190123168531,20190123168532,20190123168533,20190123168731,20190123168765,20190123169360,20190123169371,20190123169445,20190123169452,20190123169863,20190123170284,20190123170415,20190123170454,20190123170455,20190123170862,20190123171249,20190123171324,20190227191506,20190227191507,20190227191632,20190227191633,20190227192242,20190227192257,20190227192374,20190227192649,20190227192676,20190227192812,20190227192813,20190227193078,20190227193087,20190227193094,20190227193228,20190227193232,20190227193280,20190227194089,20190227194120,20190227194195,20190227194474,20190227194530,20190227195094,20190227195097,20190227195098,20190227195131,20190227195285,20190227195286,20190227195287,20190227195289,20190227195290,20190227195336,20190227195355,20190227195426,20190227195428,20190227195481,20190227195678,20190227195804,20190227195841,20190227195927,20190227195941,20190227196027,20190227196028,20190227196029,20190227196041,20190227196043,20190227196045,20190227196046,20190227196048,20190227196072,20190227196075,20190227196220,20190227196221,20190227196222,20190227196223,20190227196226,20190227196647,20190227196648,20190227196649,20190227196765,20190227196766,20190227196767,20190227196768,20190227196769,20190227196770,20190227196771,20190227196772,20190227196820,20190227196858,20190227197002,20190227197032,20190227197073,20190227197181,20190227197226,20190227197298,20190227197431,20190227197434,20190227197743,20190227197788,20190227197817,20190227197822,20190227197824,20190227197826,20190227197827,20190227197835,20190227197880,20190227197963,20190227197985,20190227198112,20190227198535,20190227198536,20190227198677,20190227198779,20190227198782,20190227198937,20190227199260,20190227199553,20190227199772,20190227199773,20190227199774,20190227199775,20190227199877,20190227199996,20190227200089,20190227200211,20190227200405,20190227200469,20190227200475,20190227200514,20190227200624,20190227200633,20190227200677,20190227200678,20190227200794,20190227200801,20190227200802,20190227200911,20190227201169,20190227201284,20190227201308,20190227201345,20190227201347,20190227201348,20190227201351,20190227201531,20190227201557,20190227201651,20190227201696,20190227201697,20190227201713,20190227201738,20190227201758,20190227201792,20190227201841,20190227201910,20190227202280,20190227202344,20190227202539,20190227202758,20190227202794,20190227202797,20190227202803,20190227202835,20190227202844,20190227202845,20190227203192,20190227204022,20190227204364,20190227204368,20190227204631,20190227204743,20190227204766,20190227204770,20190227204772,20190227204773,20190227204810,20190227204845,20190227204908,20190227204909,20190227204914,20190227204971,20190227205078,20190227205091,20190227205111,20190227205189,20190227205212,20190227205558,20190227205559,20190227205580,20190227205694,20190227205695,20190227205696,20190227205748,20190227205803,20190227205815,20190227206163,20190227206164,20190227206165,20190227206173,20190227206182,20190227206296,20190227206339,20190227206395,20190227206396,20190227206473,20190227206663,20190227206664,20190227206665,20190227206669,20190227206678,20190227206679,20190227206680,20190227206698,20190227206699,20190227206701,20190227206702,20190227206776,20190227206789,20190227206857,20190227206875,20190227206878,20190227206949,20190227207000,20190227207017,20190227207027,20190227207240,20190227207241,20190227207260,20190227207289,20190227207291,20190227207323,20190227207471,20190227207571,20190227207576,20190227207629,20190227207789,20190227208001,20190227208002,20190227208003,20190227208118,20190227208178,20190227208196,20190227208276,20190227208675,20190227208683,20190227208857,20190227208858,20190227209050,20190227209084,20190227209119,20190227209121,20190227209352,20190227209359,20190227209510,20190227209599,20190227209600,20190227209601,20190227209602,20190227209603,20190227209604,20190227209610,20190227209636,20190227209693,20190227209700,20190227209792,20190227209793,20190227209866,20190227210025,20190227210074,20190227210076,20190227210077,20190227210078,20190227210084,20190227210088,20190227210089,20190227210092,20190227210141,20190227210145,20190227210160,20190227210172,20190227210234,20190227210235,20190227210238,20190227210267,20190227210377,20190227210396,20190227210596,20190227210602,20190227210636,20190227210637,20190227210638,20190227211112,20190227211115,20190227211482,20190227211508,20190227211585,20190227211721,20190227211722,20190227211737,20190227211761,20190227211762,20190227211766,20190227211775,20190227212001,20190227212033,20190227212067,20190227212077,20190227212078,20190227212126,20190227212128,20190227212130,20190227212182,20190227212186,20190227212192,20190227212496,20190227212592,20190227212618,20190227212619,20190227212621,20190227212622,20190227212623,20190227212624,20190227212637,20190227212640,20190227212641,20190227212734,20190227212750,20190227212752,20190227212755,20190227212848,20190227212850,20190227212851,20190227212852,20190227213052,20190227213094,20190227213133,20190227213220,20190227213221,20190227213300,20190227213301,20190227213302,20190227213352,20190227213353,20190227213605,20190227213635,20190227213678,20190227213854,20190227213941,20190227213942,20190227213943,20190227213969,20190227213987,20190227213991,20190227214077,20190227214324,20190227214743,20190227214782,20190227215261,20190227215535,20190227215566,20190227215579,20190227215963,20190227215978,20190227216058,20190227216141,20190227216142,20190227216258,20190227216260,20190227216411,20190227216674,20190227216718,20190227216868,20190227216980,20190227216981,20190227216982,20190227217037,20190227217222,20190227217271,20190227217703,20190227218018,20190227218155,20190227218157,20190227218158,20190227218160,20190227218162,20190227218449,20190227218452,20190227218462,20190227218578,20190227218580,20190227218638,20190227218766,20190227218767,20190227218782,20190227218783,20190227218887,20190227218940,20190227219207,20190227219212,20190227219216,20190227219294,20190227219301,20190227219556,20190227219848,20190227219857,20190227219864,20190227220094,20190227220115,20190227220116,20190227220118,20190227220148,20190227220266,20190227220365,20190227220592,20190227220673,20190227220691,20190227220727,20190227220781,20190227220850,20190227220851,20190227220853,20190227220977,20190227221103,20190227221141,20190227221336,20190227221387,20190227221388,20190227221389,20190227221422,20190227221443,20190227221591,20190227221592,20190227221606,20190227221607,20190227222081,20190227222084,20190227222219,20190227222247,20190227222375,20190227222377,20190227222413,20190227222447,20190227222543,20190227222676,20190227222731,20190227222771,20190227222844,20190227222856,20190227222933,20190227222946,20190227222954,20190227223139,20190227223192,20190227223205,20190227223211,20190227223217,20190227223239,20190227223264,20190227223471,20190227223510,20190227223553,20190227223554,20190227223666,20190227223695,20190227223728,20190227223801,20190227223802,20190227223803,20190227223805,20190227223806,20190227223807,20190227223808,20190227223901,20190227223941,20190227224020,20190227224053,20190227224054,20190227224125,20190227224128,20190227224149,20190227224158,20190227224420,20190227224422,20190227224429,20190227224433,20190227224436,20190227224441,20190227224489,20190227224491,20190227224492,20190227224493,20190227224495,20190227224497,20190227224498,20190227224501,20190227224502,20190227224517,20190227224520,20190227224522,20190227224523,20190227224525,20190227224529,20190227224530,20190227224531,20190227224534,20190227224549,20190227224755,20190227224756,20190227224758,20190227224950,20190227225043,20190227225102,20190227225151,20190227225152,20190227225308,20190227225309,20190227225314,20190227225320,20190227225326,20190227225328,20190227225558,20190227225592,20190227225594,20190227225596,20190227225628,20190227225641,20190227225791,20190227225817,20190227226032,20190227226184,20190227226205,20190227226215,20190227226263,20190227226281,20190227226291,20190227226294,20190227226316,20190227226317,20190227226330,20190227227189,20190227227190,20190227227334,20190227227354,20190227227362,20190227227370,20190227227378,20190227227546,20190227227924,20190227228089,20190227228101,20190227228268,20190227228302,20190227228321,20190227228335,20190227228337,20190227228338,20190227228339,20190227228449,20190227228455,20190227228456,20190227228457,20190227228464,20190227228465,20190227228468,20190227228469,20190227228479,20190227228480,20190227228543,20190227228550,20190227228571,20190227228645,20190227228646,20190227228829,20190227228831,20190227228851,20190227228866,20190227228867,20190227228868,20190227229562,20190227229567,20190227229569,20190227229571,20190227229573,20190227229575,20190227229576,20190227229705,20190227229707,20190227229835,20190227229922,20190227229958,20190227230018,20190227230144,20190227230259,20190227230273,20190227230326,20190227230376,20190227230567,20190227230600,20190227230602,20190227230606,20190227230678,20190227230680,20190227230685,20190227230690,20190227230729,20190227230730,20190227230732,20190227230739,20190227230740,20190227231082,20190227231129,20190227231138,20190227231149,20190227231151,20190227231153,20190227231155,20190227231156,20190227231159,20190227231162,20190227231163,20190227231164,20190227231166,20190227231169,20190227231287,20190227231288,20190227231456,20190227231457,20190227231459,20190227231462,20190227231635,20190227231699,20190227231809,20190227231811,20190227231842,20190227231972,20190227231998,20190227232097,20190227232103,20190227232109,20190227232258,20190227232261,20190227232302,20190227233224,20190227233228,20190227233292,20190227233293,20190227233333,20190227233487,20190227233553,20190227233634,20190227233667,20190227233903,20190227233904,20190227233905,20190227234205,20190227234487,20190227234534,20190227234613,20190227234618,20190227234729,20190227234810,20190227234837,20190227234841,20190227234850,20190227234889,20190227234920,20190227234927,20190227234969,20190227235092,20190227235098,20190227235100,20190227235197,20190227235199,20190227235572,20190227235631,20190227235676,20190227235712,20190227235851,20190227235988,20190227235989,20190227235990,20190227235999,20190227236000,20190227236002,20190227236003,20190227236006,20190227236008,20190227236010,20190227236014,20190227236015,20190227236016,20190227236018,20190227236021,20190227236023,20190227236024,20190227236025,20190227236027,20190227236028,20190227236033,20190227236042,20190227236046,20190227236047,20190227236048,20190227236049,20190227236117,20190227236160,20190227236161,20190227236199,20190227236370,20190227236373,20190227236568,20190227236663,20190227236664,20190227237090,20190227237174,20190227237182,20190227237226,20190227237307,20190227237308,20190227237309,20190227237310,20190227237311,20190227237313,20190227237314,20190227237315,20190227237337,20190227237378,20190227237466,20190227237467,20190227237533,20190227237820,20190227237836,20190227238151,20190227238605,20190227238896,20190227238897,20190227238899,20190227238932,20190227239062,20190227239466,20190227239475,20190227239597,20190227239621,20190227239630,20190227239633,20190227239635,20190227239760,20190227239868,20190227239869,20190227239870,20190227239883,20190227239928,20190227239958,20190227239962,20190227239977,20190227239978,20190227240003,20190227240027,20190227240051,20190227240126,20190227240129,20190227240137,20190227240144,20190227240965,20190227241024,20190227241054,20190227241203,20190227241232,20190227241239,20190227241250,20190227241555,20190227241761,20190227241762,20190227241770,20190227241812,20190227241817,20190227241818,20190227241842,20190227241866,20190227242351,20190227242432,20190227242434,20190227243665,20190227243776,20190227244537,20190227244539,20190227244680,20190227245424,20190227245841,20190227246025,20190227246028,20190227246046,20190227247462,20190227247465,20190227247469,20190227247471,20190227247472,20190227247473,20190227247852,20190227248839,20190227249088,20190227249276,20190227249298,20190227249305,20190227249318,20190227249871,20190227249930,20190227250032,20190227250196,20190227250199,20190227250200,20190227250201,20190227250314,20190227250641,20190227250647,20190227251085,20190227251086,20190227251287,20190227251517,20190227251920,20190227252312";
//		List<String> rpIdList = Arrays.asList(str.split(","));
//		String dir = "/Users/wangyang/Downloads/11-1";
//		String[] fileList = new File(dir).list();
//		for (String filePath : fileList) {
//			System.out.println(dir + "/" + filePath);
//			ArrayList<String> arrayList = new ArrayList();
//			readLines(dir + "/" + filePath, arrayList);
//			List<String> list = new ArrayList<>();
//			int count = 0;
//			BigDecimal bigDecimal = new BigDecimal(0.00);
//			String price = "";
//			for (String line : arrayList) {
//				if (StringUtils.isBlank(line)) {
//					continue;
//				}
//				String[] arr = line.split("\\|");
//				if (arr.length == 2) {
//					count = Integer.valueOf(arr[0]);
//					price = arr[1];
//				}
//				if (arr.length> 2) {
//					String serialNum = arr[2];
//					bigDecimal = bigDecimal.add(new BigDecimal(arr[5]));
//					if (!serialNum.startsWith("1")) {
//						list.add(line);
//					}
//				}
//			}
//			System.out.println("文件"+ filePath + "第一行数据为行数为" + count + ",总金额为："
//					+ price + ",实际行数为：" + (arrayList.size()-1) + ",实际金额为：" + bigDecimal.toString());
//			System.out.println("文件：" + filePath + "不符合条件的数据大小为：" + list.size());
//		}

//		String file = "DSJ_202005111111000902478720563_20200511_151846.txt";
//		file.substring(0, file.indexOf(".txt"));
//		System.out.println();
	}


	public static void readLines(String file, ArrayList<String> lines) {
		BufferedReader reader = null;

		try {

			reader = new BufferedReader(new FileReader(new File(file)));

			String line = null;
			while ((line = reader.readLine()) != null) {
				lines.add(line);
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public static void readLines(String file, HashSet<String> lines) {
		BufferedReader reader = null;

		try {

			reader = new BufferedReader(new FileReader(new File(file)));

			String line = null;
			while ((line = reader.readLine()) != null) {
				lines.add(line.trim());
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static void readLines2Lowcase(String inputFile,
			ArrayList<String> lines) {
		BufferedReader reader = null;

		try {

			reader = new BufferedReader(new FileReader(new File(inputFile)));

			String line = null;
			while ((line = reader.readLine()) != null) {
				lines.add(line.toLowerCase());
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public static void writeLines(String file, ArrayList<?> counts) {
		BufferedWriter writer = null;

		try {

			writer = new BufferedWriter(new FileWriter(new File(file)));

			for (int i = 0; i < counts.size(); i++) {
				writer.write(counts.get(i) + "\n");
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public static void writeLines(String file, HashSet<String> counts) {
		BufferedWriter writer = null;

		try {

			writer = new BufferedWriter(new FileWriter(new File(file)));
			Iterator iterator = counts.iterator();
			while (iterator.hasNext()) {
				writer.write(iterator.next() + "\n");
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public static void writeLine(String file, String string2) {
		BufferedWriter writer = null;

		try {

			writer = new BufferedWriter(new FileWriter(new File(file)));

			writer.write(string2 + "\n");

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public static void tokenize(String line, ArrayList<String> tokens) {
		StringTokenizer strTok = new StringTokenizer(line);
		while (strTok.hasMoreTokens()) {
			String token = strTok.nextToken();
			tokens.add(token.trim());
		}
	}

	public static void print(ArrayList<String> tokens, String symbol) {
		for (int i = 0; i < tokens.size(); i++) {
			System.out.print(tokens.get(i) + symbol);
		}
		System.out.print("\n");
	}

	// HashMap Operations
	public static void printHash(HashMap<?, ?> hashMap) {
		Set<?> s = hashMap.entrySet();
		Iterator<?> it = s.iterator();
		while (it.hasNext()) {
			Map.Entry m = (Map.Entry) it.next();
			System.out.println(m.getKey() + "\t" + m.getValue());
		}
	}

	public static ArrayList<String> getHashMap(HashMap<String, String> hm) {
		ArrayList<String> a = new ArrayList<String>();
		Set<?> s = hm.entrySet();
		Iterator<?> it = s.iterator();
		while (it.hasNext()) {
			Map.Entry m = (Map.Entry) it.next();
			a.add(m.getKey() + "\t" + m.getValue());
		}
		return a;
	}

	public static ArrayList<String> getHashMap2(HashMap<String, Integer> hm) {
		ArrayList<String> a = new ArrayList<String>();
		Set<?> s = hm.entrySet();
		Iterator<?> it = s.iterator();
		while (it.hasNext()) {
			Map.Entry m = (Map.Entry) it.next();
			a.add(m.getKey() + "\t" + m.getValue());
		}
		return a;
	}

	public static String getKeysFromValue(HashMap<Integer, String> hm,
			String value) {
		Set<?> s = hm.entrySet();
		// Move next key and value of HashMap by iterator
		Iterator<?> it = s.iterator();
		while (it.hasNext()) {
			// key=value separator this by Map.Entry to get key and value
			Map.Entry m = (Map.Entry) it.next();
			if (m.getValue().equals(value))
				return m.getKey() + "";
		}
		System.err.println("Error, can't find the data in Hashmap!");
		return null;
	}

	public static void readHash(String type_map,
			HashMap<String, String> typeMap, boolean flag) {

		ArrayList<String> types = new ArrayList<String>();
		ArrayList<String> tokens = new ArrayList<String>();

		if (type_map != null) {
			readLines(type_map, types);
			for (int i = 0; i < types.size(); i++) {
				if (!types.get(i).isEmpty()) {
					FileUtil.tokenize(types.get(i), tokens);
					if (tokens.size() != 0) {
						if (tokens.size() != 2) {
							for (int j = 0; j < tokens.size(); j++) {
								System.out.print(tokens.get(j) + " ");
							}
							System.err
									.println(type_map
											+ " Error ! Not two elements in one line !");
							return;
						}
						String tokens0 = "";
						String tokens1 = "";
						if (flag) {
							tokens0 = tokens.get(0).trim();
							tokens1 = tokens.get(1).trim();
						} else {
							tokens0 = tokens.get(1).trim();
							tokens1 = tokens.get(0).trim();
						}
						if (!typeMap.containsKey(tokens0))
							typeMap.put(tokens0, tokens1);
						else {
							System.err.println(tokens0 + " " + tokens1);
							System.err
									.println(type_map
											+ " Ignore this one ! Same type in first column !");
						}
					}
					tokens.clear();
				}
			}
		}
	}

	public static void readHash2(String type_map,
			HashMap<String, Integer> hashMap) {

		ArrayList<String> types = new ArrayList<String>();
		ArrayList<String> tokens = new ArrayList<String>();

		if (type_map != null) {
			readLines(type_map, types);
			for (int i = 0; i < types.size(); i++) {
				if (!types.get(i).isEmpty()) {
					FileUtil.tokenize(types.get(i), tokens);
					if (tokens.size() != 0) {
						if (tokens.size() != 2) {
							for (int j = 0; j < tokens.size(); j++) {
								System.out.print(tokens.get(j) + " ");
							}
							System.err
									.println(type_map
											+ " Error ! Not two elements in one line !");
							return;
						}
						if (!hashMap.containsKey(tokens.get(0)))
							hashMap.put(tokens.get(0),
									new Integer(tokens.get(1)));
						else {
							System.out.println(tokens.get(0) + " "
									+ tokens.get(1));
							System.err.println(type_map
									+ " Error ! Same type in first column !");
							return;
						}
					}
					tokens.clear();
				}
			}
		}
	}

	public static void readHash3(String type_map,
			HashMap<String, Integer> hashMap) {

		ArrayList<String> types = new ArrayList<String>();
		ArrayList<String> tokens = new ArrayList<String>();

		if (type_map != null) {
			readLines(type_map, types);
			for (int i = 0; i < types.size(); i++) {
				if (!types.get(i).isEmpty()) {
					FileUtil.tokenize(types.get(i), tokens);
					if (tokens.size() != 0) {
						if (tokens.size() < 2) {
							for (int j = 0; j < tokens.size(); j++) {
								System.out.print(tokens.get(j) + " ");
							}
							System.err
									.println(type_map
											+ " Error ! Not two elements in one line !");
							return;
						}
						String key = tokens.get(0);
						String value = tokens.get(tokens.size() - 1);
						for (int no = 1; no < tokens.size() - 1; no++) {
							key += " " + tokens.get(no);
						}
						if (!hashMap.containsKey(key))
							hashMap.put(key, new Integer(value));
						else {
							System.out.println(key + " " + value);
							System.err.println(type_map
									+ " Error ! Same type in first column !");
							return;
						}
					}
					tokens.clear();
				}
			}
		}
	}

	/**
	 * Create a directory by calling mkdir();
	 *
	 * @param dirFile
	 */
	public static void mkdir(File dirFile) {
		System.out.println("Creating the folder: " + dirFile);
		try {
			// File dirFile = new File(mkdirName);
			boolean bFile = dirFile.exists();
			if (bFile == true) {
				System.out.println("The folder exists.");
			} else {
				System.out
						.println("The folder do not exist, now trying to create a one...");
				bFile = dirFile.mkdirs();
				if (bFile == true) {
					System.out.println("Create successfully!");
				} else {
					System.out
							.println("Disable to make the folder,please check the disk is full or not.");
					System.exit(1);
				}
			}
		} catch (Exception err) {
			System.err.println("ELS - Chart : unexpected error");
			err.printStackTrace();
		}
	}

	/**
	 *
	 * @param path
	 * @return
	 */
	static public boolean deleteDirectory(File path) {
		if (path.exists()) {
			File[] files = path.listFiles();
			for (int i = 0; i < files.length; i++) {
				if (files[i].isDirectory()) {
					deleteDirectory(files[i]);
				} else {
					files[i].delete();
				}
			}
		}
		return (path.delete());
	}

	/**
	 * List files in a given directory
	 *
	 * */
	static public String[] listFiles(String inputdir) {
		File dir = new File(inputdir);

		String[] children = dir.list();
		if (children == null) {
			// Either dir does not exist or is not a directory
		} else {
			for (int i = 0; i < children.length; i++) {
				// Get filename of file or directory
				String filename = children[i];
			}
		}

		return children;
	}

	public static void listFiles(String inputdir, ArrayList<String> followees) {
		File dir = new File(inputdir);

		String[] children = dir.list();
		if (children == null) {
			// Either dir does not exist or is not a directory
		} else {
			for (int i = 0; i < children.length; i++) {
				// Get filename of file or directory
				followees.add(children[i]);
			}
		}
	}

	/**
	 * List files in a given directory
	 *
	 * */
	static public String[] listFilteredFiles(String inputdir,
			final String filterCondition) {
		File dir = new File(inputdir);

		String[] children = dir.list();
		// It is also possible to filter the list of returned files.
		// This example does not return any files that start with `.'.
		FilenameFilter filter = new FilenameFilter() {
			public boolean accept(File dir, String name) {
				return name.endsWith(filterCondition);
			}
		};
		children = dir.list(filter);

		return children;
	}

	/**
	 * List files recursively in a given directory
	 *
	 * */
	static public void listFilesR() {
		File dir = new File("directoryName");

		String[] children = dir.list();

		// The list of files can also be retrieved as File objects
		File[] files = dir.listFiles();

		// This filter only returns directories
		FileFilter fileFilter = new FileFilter() {
			public boolean accept(File file) {
				return file.isDirectory();
			}
		};
		files = dir.listFiles(fileFilter);

	}

	/**
	 * Frequently used functions
	 * */
	static public int count(String a, String contains) {
		int i = 0;
		int count = 0;
		while (a.contains(contains)) {
			i = a.indexOf(contains);
			a = a.substring(0, i)
					+ a.substring(i + contains.length(), a.length());
			count++;
		}
		return count;
	}

	public static void print(String[] files) {

		for (int i = 0; i < files.length; i++) {
			System.out.print(files[i] + " ");
		}
		System.out.print("\n");
	}

	public static void print(int[] c1) {
		for (int i = 0; i < c1.length; i++) {
			System.out.print(c1[i] + " ");
		}
		System.out.println();
	}

	public static void test() {
		ArrayList<String> a = new ArrayList<String>();

		a.add("fds");
		a.add("%^2");
		a.add("%$$#");
		a.add("$$");
		a.add("f");

		for (int i = 0; i < a.size(); i++) {
			System.out.println(a.get(i) + "\t" + isnoisy(a.get(i)));
		}
		System.exit(1);
	}

	public static boolean isnoisy(String token) {
		return token.matches("[\\p{Punct}]+");
	}

	public static void writeLines(String file, HashMap<?, ?> hashMap) {
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new FileWriter(new File(file)));

			Set<?> s = hashMap.entrySet();
			Iterator<?> it = s.iterator();
			while (it.hasNext()) {
				Map.Entry m = (Map.Entry) it.next();
				writer.write(m.getKey() + "\t" + m.getValue() + "\n");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static void print(double[] p_topic, String prefix, String midd,
			String fedix) {
		System.out.print(prefix);
		for (int i = 0; i < p_topic.length; i++) {
			System.out.print(p_topic[i] + midd);
		}
		System.out.print(fedix);
	}
}
